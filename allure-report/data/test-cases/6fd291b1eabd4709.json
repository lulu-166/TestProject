{
  "uid" : "6fd291b1eabd4709",
  "name" : "test_001",
  "fullName" : "unittest_package.test_unittest_baidu.baidu#test_001",
  "historyId" : "10970871cf066868d78bcc64987fa6a5",
  "time" : {
    "start" : 1617688352804,
    "stop" : 1617688352804,
    "duration" : 0
  },
  "description" : "验证：百度首页点击新闻后的跳转",
  "descriptionHtml" : "<p>验证：百度首页点击新闻后的跳转</p>\n",
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: Process unexpectedly closed with status: 0",
  "statusTrace" : "cls = <class 'unittest_package.test_unittest_baidu.baidu'>\n\n    @classmethod\n    def setUpClass(cls):\n>       cls.driver=webdriver.Firefox()\n\nunittest_package\\test_unittest_baidu.py:7: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nd:\\users\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\firefox\\webdriver.py:154: in __init__\n    keep_alive=True)\nd:\\users\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:151: in __init__\n    self.start_session(desired_capabilities, browser_profile)\nd:\\users\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:240: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\nd:\\users\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:308: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x02DCE450>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"Process unexpectedly closed with status: 0\",\"st...      0x420756 - <no info>\\\\n   9:           0x6b96e0 - <no info>\\\\n  10:         0x76f6570d - BaseThreadInitThunk\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException and 'alert' in value:\n            raise exception_class(message, screen, stacktrace, value['alert'].get('text'))\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Process unexpectedly closed with status: 0\n\nd:\\users\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:194: WebDriverException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_UnitTestCase__pytest_class_setup",
    "time" : {
      "start" : 1617688352805,
      "stop" : 1617688367601,
      "duration" : 14796
    },
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: Process unexpectedly closed with status: 0\n\n",
    "statusTrace" : "  File \"d:\\users\\python\\python36-32\\lib\\site-packages\\pluggy\\callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"d:\\users\\python\\python36-32\\lib\\site-packages\\_pytest\\fixtures.py\", line 1124, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"d:\\users\\python\\python36-32\\lib\\site-packages\\_pytest\\fixtures.py\", line 921, in call_fixture_func\n    fixture_result = next(generator)\n  File \"d:\\users\\python\\python36-32\\lib\\site-packages\\_pytest\\unittest.py\", line 131, in fixture\n    setup()\n  File \"D:\\Users\\dca\\PycharmProjects\\TestProjectJieKou\\unittest_package\\test_unittest_baidu.py\", line 7, in setUpClass\n    cls.driver=webdriver.Firefox()\n  File \"d:\\users\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\firefox\\webdriver.py\", line 154, in __init__\n    keep_alive=True)\n  File \"d:\\users\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 151, in __init__\n    self.start_session(desired_capabilities, browser_profile)\n  File \"d:\\users\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 240, in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n  File \"d:\\users\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 308, in execute\n    self.error_handler.check_response(response)\n  File \"d:\\users\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 194, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "unittest_package"
  }, {
    "name" : "suite",
    "value" : "test_unittest_baidu"
  }, {
    "name" : "subSuite",
    "value" : "baidu"
  }, {
    "name" : "host",
    "value" : "dc"
  }, {
    "name" : "thread",
    "value" : "11476-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "unittest_package.test_unittest_baidu"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "6fd291b1eabd4709.json",
  "parameterValues" : [ ]
}